{"version":3,"sources":["../../../../../assets/scripts/component/assets/scripts/component/HandleArea.js"],"names":["cc","Class","extends","Component","properties","wantPlaceEntityToggle","default","undefined","type","ToggleContainer","reuseItem","require","newConfigWnd","Node","newTowerNode","newTowerToggle","updatePlaceType","toggleNode","utils","getToggleCheckNode","checkType","name","curPassIdx","passData","getCurPassIdx","editData","setWantPlaceEntity","clearWantPlaceEntity","updateList","updateTowerItem","item","idx","labelNode","getChildByName","label","getComponent","Label","data","configData","getConfigRow","str","format","level","price","string","updateMonsterItem","dropGold","hp","speed","configType","editList","getConfigList","setDataLen","length","onLoad","globalEvent","on","clearWantPlaceEntityToggle","setUpdateItemFunc","rowInfo","btnEdit","entityType","configIdx","editType","curEditInfo","editIdx","color","bind","toNewConfig","active","yesNewConfig","towerToggle","newTowerRow","log","newMonsterRow","noNewConfig","wantPlaceEntity","event","target","unToggleCheck","onDestroy","off","start"],"mappings":"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","file":"HandleArea.js","sourceRoot":"../../../../../assets/scripts/component","sourcesContent":["cc.Class({\n    extends:cc.Component,\n    properties:{\n        wantPlaceEntityToggle:{\n            default:undefined,\n            type:cc.ToggleContainer,\n        },\n        reuseItem:{\n            default:undefined,\n            type:require(\"ReuseItem\"),\n        },\n        newConfigWnd:{\n            default:undefined,\n            type:cc.Node,\n        },\n        newTowerNode:{\n            default:undefined,\n            type:cc.Node,\n        },\n        newTowerToggle:{\n            default:undefined,\n            type:cc.ToggleContainer,\n        },\n    },\n    updatePlaceType(){\n        var toggleNode = cc.utils.getToggleCheckNode(this.wantPlaceEntityToggle);\n        if(toggleNode)\n            this.checkType = toggleNode.name;\n        else\n            this.checkType = undefined;\n\n        var curPassIdx = cc.passData.getCurPassIdx();\n        switch(this.checkType){\n            case \"EntityPoint\":\n            case \"EntityFloor\":\n            case \"EntityBorn\":\n            case \"EntityTarget\":\n            cc.editData.setWantPlaceEntity(\n                this.checkType,\n                curPassIdx);\n            break;\n            default:\n                cc.editData.clearWantPlaceEntity();\n            break;\n        }\n        this.updateList();\n    },\n    updateTowerItem(item,idx){\n        var labelNode = item.getChildByName(\"Label\");\n        var label = labelNode.getComponent(cc.Label);\n        var data = cc.configData.getConfigRow(\"tower\",idx);\n        var str = \"idx:{0} type:{1}\\nlevel:{2} price:{3}\";\n        str = str.format(data.idx,\n                         data.type,\n                         data.level,\n                         data.price);\n        label.string = str;\n    },\n    updateMonsterItem(item,idx){\n        var labelNode = item.getChildByName(\"Label\");\n        var label = labelNode.getComponent(cc.Label);\n        var data = cc.configData.getConfigRow(\"monster\",idx);\n        var str = \"idx:{0} level:{2}\\ndropGold:{3} hp:{4}\\nspeed:{4}\";\n        str = str.format(data.idx,\n                         data.type,\n                         data.dropGold,\n                         data.hp,\n                         data.speed);\n        label.string = str;\n    },\n    updateList(){\n        var configType = undefined;\n        switch(this.checkType){\n            case \"towerList\":\n            configType = \"tower\";\n            break;\n            case \"monsterList\":\n            configType = \"monster\";\n            break;\n        }\n\n        if(configType){\n            var editList = cc.configData.getConfigList(configType);\n            this.reuseItem.setDataLen(editList.length);\n        }else{\n            this.reuseItem.setDataLen(0);\n        }\n    },\n    onLoad(){\n        cc.globalEvent.on(\"EditData:clearWantPlaceEntity\",this.clearWantPlaceEntityToggle,this);\n        cc.globalEvent.on(\"EditData:editRow\",this.updateList,this);\n        cc.globalEvent.on(\"EditData:updateList\",this.updateList,this);\n\n        this.reuseItem.setUpdateItemFunc(function(item,idx){\n\n            var configType = undefined;\n            switch(this.checkType){\n                case \"towerList\":\n                configType = \"tower\";\n                break;\n                case \"monsterList\":\n                configType = \"monster\";\n                break;\n            }\n            if(!configType)return;\n\n            var rowInfo = cc.configData.getConfigRow(configType,idx);\n            var btnEdit = item.getChildByName(\"BtnEdit\");\n            btnEdit.entityType = rowInfo.type;\n            btnEdit.configIdx = idx;\n\n            var editType = cc.editData.curEditInfo.type;\n            var editIdx = cc.editData.curEditInfo.idx;\n            if(editType == configType && editIdx == idx){\n                item.color = cc.color(0,255,0);\n            }else{\n                item.color = cc.color(255,255,255);\n            }\n\n            switch(this.checkType){\n                case \"towerList\":\n                this.updateTowerItem(item,idx);\n                break;\n                case \"monsterList\":\n                this.updateMonsterItem(item,idx);\n                break;\n            }\n\n        }.bind(this));\n        this.updatePlaceType();\n        this.updateList();\n    },\n    toNewConfig(){\n        switch(this.checkType){\n            case \"towerList\":\n            this.newConfigWnd.active = true;\n            this.newTowerNode.active = true;\n            break;\n            case \"monsterList\":\n            this.newConfigWnd.active = true;\n            this.newTowerNode.active = false;\n            break;\n            default:\n            this.newConfigWnd.active = false;\n            break;\n        }\n    },\n    yesNewConfig(){\n        switch(this.checkType){\n            case \"towerList\":\n            var towerToggle = cc.utils.getToggleCheckNode(this.newTowerToggle);\n            if(towerToggle){\n                cc.editData.newTowerRow(towerToggle.name);\n            }else{\n                cc.log(\"please select a tower type\");\n                return;\n            }\n            break;\n            case \"monsterList\":\n            cc.editData.newMonsterRow();\n            break;\n        }\n        this.newConfigWnd.active = false;\n    },\n    noNewConfig(){\n        this.newConfigWnd.active = false;\n    },\n    wantPlaceEntity(event){\n        cc.editData.setWantPlaceEntity(\n            event.target.entityType,\n            event.target.configIdx);\n    },\n    clearWantPlaceEntity(){\n        this.clearWantPlaceEntityToggle();\n        cc.editData.clearWantPlaceEntity();\n    },\n    clearWantPlaceEntityToggle(){\n        if(this.checkType == \"EntityPoint\"||\n           this.checkType == \"EntityFloor\"||\n           this.checkType == \"EntityBorn\"||\n           this.checkType == \"EntityTarget\"\n          ){\n            cc.utils.unToggleCheck(this.wantPlaceEntityToggle);\n            this.updatePlaceType();\n        }\n    },\n    onDestroy(){\n        cc.globalEvent.off(\"EditData:clearWantPlaceEntity\",this.clearWantPlaceEntityToggle,this);\n        cc.globalEvent.off(\"EditData:editRow\",this.updateList,this);\n        cc.globalEvent.off(\"EditData:updateList\",this.updateList,this);\n    },\n    start(){\n        \n    },\n\n})"]}