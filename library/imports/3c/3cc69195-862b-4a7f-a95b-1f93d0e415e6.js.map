{"version":3,"sources":["../../../../../assets/scripts/node/assets/scripts/node/ParticalNode.js"],"names":["MyParticleSystem","cc","Class","extends","ParticleSystem","onEnable","_super","_sgNode","resetSystem","applyContent","content","texture","textureRect","self","isValid","sgNode","active","isActive","_plistFile","initWithDictionary","setTextureWithRect","emissionRate","setPosition","stopSystem","CC_EDITOR","engine","isPlaying","_applyAutoRemove","_custom","_applyCustoms","ParticalNode","require","_onPreDestroy","ctor","partical","addComponent","skinInfoStr","undefined","skinInfo","atlas","updateAtlas","setCompleteCallback","callback","completeCallback","resetSkinData","name","x","y","anchorX","anchorY","rotation","scale","autoDestroy","playTime","zIndex","resetAniData","playTimeVar","setColor","colorStr","color","updateInfo","JSON","stringify","parse","findName","resMgr","getRes","resName","originUpdate","prototype","update","dt","call","destroy","bind","loadTempRes","err","asset","newAsset","utils","clone","spriteFrameName","textureFileName","replace","spriteFrame","getSpriteFrame","getTexture","getRect","textureCache","cacheImage","url","raw","startColorGreen","g","startColorBlue","b","startColorRed","r","finishColorBlue","finishColorGreen","finishColorRed","ParticleAsset","module","exports"],"mappings":"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","file":"ParticalNode.js","sourceRoot":"../../../../../assets/scripts/node","sourcesContent":["var MyParticleSystem = cc.Class({\n    extends:cc.ParticleSystem,\n    onEnable(){\n        this._super();\n        this._sgNode.resetSystem();\n    },\n    applyContent: function (content,texture,textureRect) {\n        var self = this;\n        if (!self.isValid) {\n            return;\n        }\n        var sgNode = self._sgNode;\n        //sgNode.particleCount = 0;\n        \n        var active = sgNode.isActive();\n\n        sgNode._plistFile = \"\";\n        sgNode.initWithDictionary(content, '');\n        if(texture){\n            sgNode.setTextureWithRect(texture,textureRect);\n        }\n\n        // For custom data export\n        if (content.emissionRate) {\n            self.emissionRate = content.emissionRate;\n        }\n\n        // recover sgNode properties\n\n        sgNode.setPosition(0, 0);\n\n        if (!active) {\n            sgNode.stopSystem();\n        }\n\n        if (!CC_EDITOR || cc.engine.isPlaying) {\n            self._applyAutoRemove();\n        }\n\n        // if become custom after loading\n        if (self._custom) {\n            self._applyCustoms();\n        }\n            \n    },\n});\n\nvar ParticalNode = cc.Class({\n    extends:require(\"SkinNode\"),\n    _onPreDestroy(){\n        this._super();\n    },\n    ctor(){\n        this.partical = this.addComponent(MyParticleSystem);\n        this.skinInfoStr = undefined;\n        this.skinInfo = undefined;\n        this.atlas = undefined;\n    },\n    updateAtlas(atlas){\n        this.atlas = atlas;\n    },\n    setCompleteCallback(callback){\n        this.completeCallback = callback;\n    },\n    resetSkinData(){\n        this.name = \"\";\n        this.x = 0;\n        this.y = 0;\n        this.anchorX = 0.5;\n        this.anchorY = 0.5;\n        this.rotation = 0;\n        this.scale = 1;\n        this.autoDestroy = false;\n        this.playTime = undefined;\n        this.zIndex = 0;\n    },\n    resetAniData(){\n        this.playTimeVar = 0;\n    },\n    setColor(colorStr){\n        if(this.skinInfo.color === colorStr){\n            return;\n        }\n        this.skinInfo.color = colorStr;\n        this.updateInfo(this.skinInfo);\n    },\n    updateInfo(skinInfo){\n        var skinInfoStr = JSON.stringify(skinInfo);\n        if(skinInfoStr == this.skinInfoStr){\n            return;\n        }\n        this.skinInfoStr = skinInfoStr;\n        this.skinInfo = JSON.parse(skinInfoStr);\n\n        this.resetSkinData();\n        this.resetAniData();\n\n        this.name = skinInfo.findName || this.name;\n        this.x = skinInfo.x || this.x;\n        this.y = skinInfo.y || this.y;\n        this.anchorX = skinInfo.anchorX || this.anchorX;\n        this.anchorY = skinInfo.anchorY || this.anchorY;\n        this.rotation = skinInfo.rotation || this.rotation;\n        this.scale = skinInfo.scale || this.scale;\n        this.zIndex = skinInfo.zIndex || this.zIndex;\n        this.autoDestroy = skinInfo.autoDestroy || false;\n        this.playTime = skinInfo.playTime;\n        if(skinInfo.atlas!=undefined){\n            this.atlas = cc.resMgr.getRes(cc.resName[skinInfo.atlas]);\n        }\n\n        var originUpdate = cc.ParticleSystem.prototype.update;\n        if(this.playTime !== undefined){\n            this.partical.update = function(dt){\n                if(originUpdate){\n                    originUpdate.call(this.partical,dt);\n                }\n                this.playTimeVar += dt;\n                if(this.playTime !== undefined){\n                    if(this.playTimeVar>this.playTime){\n                        if(this.autoDestroy){\n                            this.destroy();\n                            return;\n                        }\n                        this.resetAniData();\n                        this.active = false;\n                        this.completeCallback(this);\n                        return;\n                    }\n                }\n            }.bind(this);\n        }else{\n            this.partical.update = originUpdate;\n        }\n\n        cc.resMgr.loadTempRes(skinInfo.name,function(err,asset){\n            if(err){\n                return;\n            }\n\n            // if(this.partical){\n            //     this.partical.destroy();\n            //     this.partical = undefined;\n            // }\n            // this.partical = this.addComponent(cc.ParticleSystem);\n            // this.partical.file = cc.url.raw(\"resources/\"+skinInfo.name+\".plist\");\n\n            var newAsset = cc.utils.clone(asset);\n            var texture = undefined;\n            var textureRect = undefined;\n            if(this.atlas){\n                var spriteFrameName = newAsset.textureFileName.replace(/.png/,\"\");\n                spriteFrameName = \"partical-\"+spriteFrameName;\n                var spriteFrame = this.atlas.getSpriteFrame(spriteFrameName);\n                if(spriteFrame){\n                    texture = spriteFrame.getTexture();\n                    textureRect = spriteFrame.getRect();\n                    cc.textureCache.cacheImage(spriteFrameName,texture);\n                }\n            }\n            newAsset.textureFileName = cc.url.raw(\"resources/partical/\"+newAsset.textureFileName);\n\n            var color = cc.utils.color(skinInfo.color);\n            if(color){\n                newAsset.startColorGreen = color.g/255;\n                newAsset.startColorBlue = color.b/255;\n                newAsset.startColorRed = color.r/255;\n\n                newAsset.finishColorBlue = newAsset.startColorGreen;\n                newAsset.finishColorGreen = newAsset.startColorBlue;\n                newAsset.finishColorRed = newAsset.startColorRed;\n            }\n\n            if(cc.isValid(this)){\n                this.partical.applyContent(newAsset,texture,textureRect);\n            }\n        }.bind(this),cc.ParticleAsset);\n    },\n});\nmodule.exports = ParticalNode;"]}